<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="propertytable_8h" kind="file" language="C++">
    <compoundname>propertytable.h</compoundname>
    <includes refid="predefine_8h" local="yes">../predefine.h</includes>
    <incdepgraph>
      <node id="2">
        <label>../predefine.h</label>
        <link refid="predefine_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/property/propertytable.h</label>
        <link refid="propertytable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Row</header>
      <description><para>Row works as the pure value array for the properties of a vertex or an edge. In general, you can think of Row as an array of void*, where each void* points to the value of a property. GRIN assumes the user already knows the corresponding property list beforehead, so that she/he knows how to cast the void* into the property&apos;s data type. </para>
</description>
      <memberdef kind="function" id="propertytable_8h_1a30b44569983ac5407a4f6a9da6844adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_row</definition>
        <argsstring>(Row)</argsstring>
        <name>destroy_row</name>
        <param>
          <type>Row</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="32" column="6" declfile="include/property/propertytable.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1a23f95e06bdec368337c1ccfbadde97d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * get_value_from_row</definition>
        <argsstring>(Row, const size_t)</argsstring>
        <name>get_value_from_row</name>
        <param>
          <type>Row</type>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
        </param>
        <briefdescription>
<para>the value of a property from row by its position in row </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="35" column="6" declfile="include/property/propertytable.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1a86a5c42d5ede169c6374b2434c8c1982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Row</type>
        <definition>Row create_row</definition>
        <argsstring>()</argsstring>
        <name>create_row</name>
        <briefdescription>
<para>create a row, usually to get vertex/edge by primary keys </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="38" column="5" declfile="include/property/propertytable.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1a36d2dd0c3492ee17c3c7a58d5534cf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool insert_value_to_row</definition>
        <argsstring>(Row, const void *)</argsstring>
        <name>insert_value_to_row</name>
        <param>
          <type>Row</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
<para>insert a value to the end of the row </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="41" column="6" declfile="include/property/propertytable.h" declline="41" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="propertytable_8h_1a01c1ba34a369590177ff90521755aac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_vertex_property_table</definition>
        <argsstring>(VertexPropertyTable)</argsstring>
        <name>destroy_vertex_property_table</name>
        <param>
          <type>VertexPropertyTable</type>
        </param>
        <briefdescription>
<para>destroy vertex property table </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VertexPropertyTable</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex property table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="50" column="6" declfile="include/property/propertytable.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1ac9bc9b9015469cbd548f5d033ef6d5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VertexPropertyTable</type>
        <definition>VertexPropertyTable get_vertex_property_table_by_type</definition>
        <argsstring>(const Graph, const VertexType)</argsstring>
        <name>get_vertex_property_table_by_type</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>VertexType</declname>
        </param>
        <briefdescription>
<para>get the vertex property table of a certain vertex type No matter column or row store strategy is used in the storage, GRIN recommends to first get the property table of the vertex type, and then fetch values(rows) by vertex and property(list). However, GRIN does provide direct row fetching API when COLUMN_STORE_TRAIT is NOT set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexType</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="62" column="21" declfile="include/property/propertytable.h" declline="62" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1a4116b4fe6d95991db646b0e99d6fbd9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * get_value_from_vertex_property_table</definition>
        <argsstring>(const VertexPropertyTable, const Vertex, const VertexProperty)</argsstring>
        <name>get_value_from_vertex_property_table</name>
        <param>
          <type>const</type>
          <declname>VertexPropertyTable</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Vertex</declname>
        </param>
        <param>
          <type>const</type>
          <declname>VertexProperty</declname>
        </param>
        <briefdescription>
<para>get vertex property value from table </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VertexPropertyTable</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex property table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex which is the row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex property which is the column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>can be casted to the property data type by the caller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="71" column="6" declfile="include/property/propertytable.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="propertytable_8h_1a0d727fb5c0a961df0f87c4b128463956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Row</type>
        <definition>Row get_row_from_vertex_property_table</definition>
        <argsstring>(const VertexPropertyTable, const Vertex, const VertexPropertyList)</argsstring>
        <name>get_row_from_vertex_property_table</name>
        <param>
          <type>const</type>
          <declname>VertexPropertyTable</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Vertex</declname>
        </param>
        <param>
          <type>const</type>
          <declname>VertexPropertyList</declname>
        </param>
        <briefdescription>
<para>get vertex row from table </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VertexPropertyTable</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex property table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex which is the row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPropertyList</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex property list as columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/property/propertytable.h" line="79" column="5" declfile="include/property/propertytable.h" declline="79" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Define the property table related APIs. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright 2020 Alibaba Group Holding Limited. Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink> Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GRIN_INCLUDE_PROPERTY_PROPERTY_TABLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRIN_INCLUDE_PROPERTY_PROPERTY_TABLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../predefine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor">#if<sp/>defined(WITH_VERTEX_PROPERTY)<sp/>||<sp/>defined(WITH_EDGE_PROPERTY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_row(Row);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="propertytable_8h_1a23f95e06bdec368337c1ccfbadde97d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="propertytable_8h_1a23f95e06bdec368337c1ccfbadde97d9" kindref="member">get_value_from_row</ref>(Row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="propertytable_8h_1a86a5c42d5ede169c6374b2434c8c1982" refkind="member"><highlight class="normal">Row<sp/><ref refid="propertytable_8h_1a86a5c42d5ede169c6374b2434c8c1982" kindref="member">create_row</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="propertytable_8h_1a36d2dd0c3492ee17c3c7a58d5534cf7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="propertytable_8h_1a36d2dd0c3492ee17c3c7a58d5534cf7e" kindref="member">insert_value_to_row</ref>(Row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_VERTEX_PROPERTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="propertytable_8h_1a01c1ba34a369590177ff90521755aac5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="propertytable_8h_1a01c1ba34a369590177ff90521755aac5" kindref="member">destroy_vertex_property_table</ref>(VertexPropertyTable);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="propertytable_8h_1ac9bc9b9015469cbd548f5d033ef6d5cb" refkind="member"><highlight class="normal">VertexPropertyTable<sp/><ref refid="propertytable_8h_1ac9bc9b9015469cbd548f5d033ef6d5cb" kindref="member">get_vertex_property_table_by_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexType);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="propertytable_8h_1a4116b4fe6d95991db646b0e99d6fbd9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="propertytable_8h_1a4116b4fe6d95991db646b0e99d6fbd9f" kindref="member">get_value_from_vertex_property_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexPropertyTable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexProperty);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="propertytable_8h_1a0d727fb5c0a961df0f87c4b128463956" refkind="member"><highlight class="normal">Row<sp/><ref refid="propertytable_8h_1a0d727fb5c0a961df0f87c4b128463956" kindref="member">get_row_from_vertex_property_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexPropertyTable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexPropertyList);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COLUMN_STORE_TRAIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">Row<sp/>get_vertex_row(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexPropertyList);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GRIN_INCLUDE_PROPERTY_PROPERTY_TABLE_H_</highlight></codeline>
    </programlisting>
    <location file="include/property/propertytable.h"/>
  </compounddef>
</doxygen>
