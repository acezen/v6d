<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structure_8h" kind="file" language="C++">
    <compoundname>structure.h</compoundname>
    <includes refid="predefine_8h" local="yes">../predefine.h</includes>
    <incdepgraph>
      <node id="2">
        <label>../predefine.h</label>
        <link refid="predefine_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/topology/structure.h</label>
        <link refid="structure_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="structure_8h_1a312f43259cd967775ab5b80787e20897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_directed</definition>
        <argsstring>(const Graph)</argsstring>
        <name>is_directed</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copyright 2020 Alibaba Group Holding Limited.</para>
<para>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <verbatim>http://www.apache.org/licenses/LICENSE-2.0
</verbatim> Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="22" column="6" declfile="include/topology/structure.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a1c931062e0c227d7ab1592088f26fe14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_multigraph</definition>
        <argsstring>(const Graph)</argsstring>
        <name>is_multigraph</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="24" column="6" declfile="include/topology/structure.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a60e70da57a982ad1b30ff93f74ae388c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_vertex_num</definition>
        <argsstring>(const Graph)</argsstring>
        <name>get_vertex_num</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="26" column="8" declfile="include/topology/structure.h" declline="26" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1aa615cdc14570debaa4b8fee30116e66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_vertex_num_by_type</definition>
        <argsstring>(const Graph, const VertexType)</argsstring>
        <name>get_vertex_num_by_type</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>VertexType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="29" column="8" declfile="include/topology/structure.h" declline="29" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1af3db1f9729bf5e90d95896dcd0b2fae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_edge_num</definition>
        <argsstring>(const Graph)</argsstring>
        <name>get_edge_num</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="32" column="8" declfile="include/topology/structure.h" declline="32" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a5795d4a8b6df456408c1f20afe632026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_edge_num_by_type</definition>
        <argsstring>(const Graph, const EdgeType)</argsstring>
        <name>get_edge_num_by_type</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>EdgeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="35" column="8" declfile="include/topology/structure.h" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a713e9f5007758f00f97625338f89e783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_vertex</definition>
        <argsstring>(Vertex)</argsstring>
        <name>destroy_vertex</name>
        <param>
          <type>Vertex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="40" column="6" declfile="include/topology/structure.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a890a7ca85ae4378d6f0e24908f5aa2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="predefine_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6" kindref="member">DataType</ref></type>
        <definition>DataType get_vertex_data_type</definition>
        <argsstring>(const Graph, const Vertex)</argsstring>
        <name>get_vertex_data_type</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Vertex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="43" column="10" declfile="include/topology/structure.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1aeb759447814afa73d230732d87d2dda9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VertexData</type>
        <definition>VertexData get_vertex_data_value</definition>
        <argsstring>(const Graph, const Vertex)</argsstring>
        <name>get_vertex_data_value</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Vertex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="45" column="12" declfile="include/topology/structure.h" declline="45" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a65d52241a75c81cdb195ab0db8590c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_vertex_data</definition>
        <argsstring>(VertexData)</argsstring>
        <name>destroy_vertex_data</name>
        <param>
          <type>VertexData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="47" column="6" declfile="include/topology/structure.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a84c35f6c48dff9313ceccf158f760d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vertex</type>
        <definition>Vertex get_vertex_from_original_id</definition>
        <argsstring>(const Graph, const OriginalID)</argsstring>
        <name>get_vertex_from_original_id</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>OriginalID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="51" column="8" declfile="include/topology/structure.h" declline="51" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a620d16699b1835590902ee35ae436368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vertex</type>
        <definition>Vertex get_vertex_from_type_original_id</definition>
        <argsstring>(const Graph, const VertexType, const OriginalID)</argsstring>
        <name>get_vertex_from_type_original_id</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>VertexType</declname>
        </param>
        <param>
          <type>const</type>
          <declname>OriginalID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="54" column="8" declfile="include/topology/structure.h" declline="54" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1afaed0106ee2b1fd4ed1bf1704f563172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OriginalID</type>
        <definition>OriginalID get_vertex_original_id</definition>
        <argsstring>(const Graph, const Vertex)</argsstring>
        <name>get_vertex_original_id</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Vertex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="57" column="12" declfile="include/topology/structure.h" declline="57" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a0c61c915577112fa8cfbf52ece43cb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_vertex_original_id</definition>
        <argsstring>(OriginalID)</argsstring>
        <name>destroy_vertex_original_id</name>
        <param>
          <type>OriginalID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="59" column="6" declfile="include/topology/structure.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1ad92da6e26eebc8b50bb8cfc7627a478b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_edge</definition>
        <argsstring>(Edge)</argsstring>
        <name>destroy_edge</name>
        <param>
          <type>Edge</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="64" column="6" declfile="include/topology/structure.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1abacd3a23739a97b420b2262489d42d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vertex</type>
        <definition>Vertex get_edge_src</definition>
        <argsstring>(const Graph, const Edge)</argsstring>
        <name>get_edge_src</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="66" column="8" declfile="include/topology/structure.h" declline="66" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="structure_8h_1a529d2fa4e5da7a2949a0d9942650dba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vertex</type>
        <definition>Vertex get_edge_dst</definition>
        <argsstring>(const Graph, const Edge)</argsstring>
        <name>get_edge_dst</name>
        <param>
          <type>const</type>
          <declname>Graph</declname>
        </param>
        <param>
          <type>const</type>
          <declname>Edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/topology/structure.h" line="68" column="8" declfile="include/topology/structure.h" declline="68" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GRIN_INCLUDE_TOPOLOGY_STRUCTURE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRIN_INCLUDE_TOPOLOGY_STRUCTURE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../predefine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Graph<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_directed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_multigraph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_vertex_num(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_VERTEX_PROPERTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_vertex_num_by_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexType);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_edge_num(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_EDGE_PROPERTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_edge_num_by_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EdgeType);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_vertex(Vertex);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_VERTEX_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="predefine_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6" kindref="member">DataType</ref><sp/>get_vertex_data_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">VertexData<sp/>get_vertex_data_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_vertex_data(VertexData);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_VERTEX_ORIGINAL_ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">Vertex<sp/>get_vertex_from_original_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OriginalID);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_VERTEX_PROPERTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">Vertex<sp/>get_vertex_from_type_original_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VertexType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OriginalID);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">OriginalID<sp/>get_vertex_original_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_vertex_original_id(OriginalID);<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_edge(Edge);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">Vertex<sp/>get_edge_src(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Edge);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">Vertex<sp/>get_edge_dst(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Edge);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_EDGE_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="predefine_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6" kindref="member">DataType</ref><sp/>get_edge_data_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Edge);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">EdgeData<sp/>get_edge_data_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Edge);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_edge_data(EdgeData);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GRIN_INCLUDE_TOPOLOGY_STRUCTURE_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/topology/structure.h"/>
  </compounddef>
</doxygen>
